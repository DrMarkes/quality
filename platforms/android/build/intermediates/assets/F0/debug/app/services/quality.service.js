"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var Sqlite = require("nativescript-sqlite");
var QualityService = (function () {
    function QualityService() {
        var _this = this;
        this.qualities = new BehaviorSubject_1.BehaviorSubject([]);
        (new Sqlite("quality.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS quality (id INTEGER PRIMARY KEY AUTOINCREMENT, character TEXT, timestamp NUMERIC)")
                .then(function (id) {
                _this.database = db;
            }), function (error) {
                console.log("CREATE TABLE ERROR", error);
            };
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    }
    QualityService.prototype.insert = function (character) {
        var timestamp = Date.now();
        this.database.execSQL("INSERT INTO quality (character, timestamp) VALUES (?, ?)", [character, timestamp]).then(function (id) {
            console.log("INSERT RESULT", id);
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    QualityService.prototype.allQualities = function () {
        var _this = this;
        var quality = [];
        this.database.all("SELECT * FROM quality")
            .then(function (rows) {
            for (var row in rows) {
                quality.push({
                    "character": rows[row][1],
                    "timestamp": rows[row][2]
                });
            }
            _this.qualities.next(quality);
        }, function (error) {
            console.log(error.message);
        });
    };
    QualityService.prototype.getQualitiesByPeriod = function (firstDate, lastDate) {
        var _this = this;
        var quality = [];
        this.database.all("SELECT * FROM quality WHERE timestamp BETWEEN ? AND ?", [firstDate, lastDate])
            .then(function (rows) {
            for (var row in rows) {
                quality.push({
                    "character": rows[row][1],
                    "timestamp": rows[row][2]
                });
            }
            _this.qualities.next(quality);
        }, function (error) {
            console.log(error.message);
        });
    };
    QualityService.prototype.getQualities = function () {
        return this.qualities.asObservable();
    };
    QualityService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], QualityService);
    return QualityService;
}());
exports.QualityService = QualityService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVhbGl0eS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicXVhbGl0eS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBRzNDLHdEQUFxRDtBQUVyRCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUc1QztJQUtJO1FBQUEsaUJBYUM7UUFmTyxjQUFTLEdBQUcsSUFBSSxpQ0FBZSxDQUFZLEVBQUUsQ0FBQyxDQUFDO1FBSW5ELENBQUMsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQzlCLEVBQUUsQ0FBQyxPQUFPLENBQUMsOEdBQThHLENBQUM7aUJBQ3pILElBQUksQ0FBQyxVQUFBLEVBQUU7Z0JBQ0osS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDdkIsQ0FBQyxDQUFDLEVBQUUsVUFBQSxLQUFLO2dCQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFBO1FBQ0wsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVELCtCQUFNLEdBQU4sVUFBTyxTQUFpQjtRQUNwQixJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsMERBQTBELEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQzdHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxxQ0FBWSxHQUFaO1FBQUEsaUJBa0JDO1FBakJHLElBQUksT0FBTyxHQUFjLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQzthQUN6QyxJQUFJLENBQUMsVUFBQSxJQUFJO1lBQ04sR0FBRyxDQUFBLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbEIsT0FBTyxDQUFDLElBQUksQ0FBQztvQkFDVCxXQUFXLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekIsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzVCLENBQUMsQ0FBQztZQUNQLENBQUM7WUFFRCxLQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqQyxDQUFDLEVBQUUsVUFBQSxLQUFLO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFHUCxDQUFDO0lBRUQsNkNBQW9CLEdBQXBCLFVBQXFCLFNBQWlCLEVBQUUsUUFBZ0I7UUFBeEQsaUJBa0JDO1FBakJHLElBQUksT0FBTyxHQUFjLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyx1REFBdUQsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUM1RixJQUFJLENBQUMsVUFBQSxJQUFJO1lBQ04sR0FBRyxDQUFBLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbEIsT0FBTyxDQUFDLElBQUksQ0FBQztvQkFDVCxXQUFXLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekIsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzVCLENBQUMsQ0FBQztZQUNQLENBQUM7WUFFRCxLQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqQyxDQUFDLEVBQUUsVUFBQSxLQUFLO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFHWCxDQUFDO0lBRUQscUNBQVksR0FBWjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUF4RVEsY0FBYztRQUQxQixpQkFBVSxFQUFFOztPQUNBLGNBQWMsQ0F5RTFCO0lBQUQscUJBQUM7Q0FBQSxBQXpFRCxJQXlFQztBQXpFWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBRdWFsaXR5IH0gZnJvbSBcIi4uL21vZGVscy9xdWFsaXR5Lm1vZGVsXCI7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSBcInJ4anMvT2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdH0gZnJvbSBcInJ4anMvQmVoYXZpb3JTdWJqZWN0XCI7XHJcblxyXG5sZXQgU3FsaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBRdWFsaXR5U2VydmljZSB7XHJcbiAgICBwcml2YXRlIGRhdGFiYXNlOiBhbnk7XHJcblxyXG4gICAgcHJpdmF0ZSBxdWFsaXRpZXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFF1YWxpdHlbXT4oW10pO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICAobmV3IFNxbGl0ZShcInF1YWxpdHkuZGJcIikpLnRoZW4oZGIgPT4ge1xyXG4gICAgICAgICAgICBkYi5leGVjU1FMKFwiQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgcXVhbGl0eSAoaWQgSU5URUdFUiBQUklNQVJZIEtFWSBBVVRPSU5DUkVNRU5ULCBjaGFyYWN0ZXIgVEVYVCwgdGltZXN0YW1wIE5VTUVSSUMpXCIpXHJcbiAgICAgICAgICAgIC50aGVuKGlkID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YWJhc2UgPSBkYjtcclxuICAgICAgICAgICAgfSksIGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ1JFQVRFIFRBQkxFIEVSUk9SXCIsIGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJPUEVOIERCIEVSUk9SXCIsIGVycm9yKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgaW5zZXJ0KGNoYXJhY3Rlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRhYmFzZS5leGVjU1FMKFwiSU5TRVJUIElOVE8gcXVhbGl0eSAoY2hhcmFjdGVyLCB0aW1lc3RhbXApIFZBTFVFUyAoPywgPylcIiwgW2NoYXJhY3RlciwgdGltZXN0YW1wXSkudGhlbihpZCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSU5TRVJUIFJFU1VMVFwiLCBpZCk7XHJcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIklOU0VSVCBFUlJPUlwiLCBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWxsUXVhbGl0aWVzKCkge1xyXG4gICAgICAgIGxldCBxdWFsaXR5OiBRdWFsaXR5W10gPSBbXTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmRhdGFiYXNlLmFsbChcIlNFTEVDVCAqIEZST00gcXVhbGl0eVwiKVxyXG4gICAgICAgIC50aGVuKHJvd3MgPT4ge1xyXG4gICAgICAgICAgICBmb3IobGV0IHJvdyBpbiByb3dzKSB7XHJcbiAgICAgICAgICAgICAgICBxdWFsaXR5LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIFwiY2hhcmFjdGVyXCI6IHJvd3Nbcm93XVsxXSxcclxuICAgICAgICAgICAgICAgICAgICBcInRpbWVzdGFtcFwiOiByb3dzW3Jvd11bMl1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnF1YWxpdGllcy5uZXh0KHF1YWxpdHkpO1xyXG4gICAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRRdWFsaXRpZXNCeVBlcmlvZChmaXJzdERhdGU6IG51bWJlciwgbGFzdERhdGU6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBxdWFsaXR5OiBRdWFsaXR5W10gPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRhYmFzZS5hbGwoXCJTRUxFQ1QgKiBGUk9NIHF1YWxpdHkgV0hFUkUgdGltZXN0YW1wIEJFVFdFRU4gPyBBTkQgP1wiLCBbZmlyc3REYXRlLCBsYXN0RGF0ZV0pXHJcbiAgICAgICAgICAgIC50aGVuKHJvd3MgPT4ge1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCByb3cgaW4gcm93cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1YWxpdHkucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2hhcmFjdGVyXCI6IHJvd3Nbcm93XVsxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aW1lc3RhbXBcIjogcm93c1tyb3ddWzJdXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWFsaXRpZXMubmV4dChxdWFsaXR5KTtcclxuICAgICAgICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UXVhbGl0aWVzKCk6IE9ic2VydmFibGU8UXVhbGl0eVtdPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucXVhbGl0aWVzLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG59Il19