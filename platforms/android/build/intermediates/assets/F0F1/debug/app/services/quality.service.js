"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var Sqlite = require("nativescript-sqlite");
var QualityService = (function () {
    function QualityService() {
        var _this = this;
        this.qualities = new BehaviorSubject_1.BehaviorSubject([]);
        (new Sqlite("quality.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS quality (id INTEGER PRIMARY KEY AUTOINCREMENT, character TEXT, timestamp NUMERIC)")
                .then(function (id) {
                _this.database = db;
            }), function (error) {
                console.log("CREATE TABLE ERROR", error);
            };
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    }
    QualityService.prototype.insert = function (character) {
        var timestamp = Date.now();
        this.database.execSQL("INSERT INTO quality (character, timestamp) VALUES (?, ?)", [character, timestamp])
            .then(function (id) { }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    QualityService.prototype.allQualities = function () {
        var _this = this;
        var quality = [];
        this.database.all("SELECT * FROM quality")
            .then(function (rows) {
            for (var row in rows) {
                quality.push({
                    "character": rows[row][1],
                    "timestamp": rows[row][2]
                });
            }
            _this.qualities.next(quality);
        }, function (error) {
            console.log(error.message);
        });
    };
    QualityService.prototype.getQualitiesByPeriod = function (firstDate, lastDate) {
        var _this = this;
        var quality = [];
        this.database.all("SELECT * FROM quality WHERE timestamp BETWEEN ? AND ?", [firstDate, lastDate])
            .then(function (rows) {
            for (var row in rows) {
                quality.push({
                    "character": rows[row][1],
                    "timestamp": rows[row][2]
                });
            }
            _this.qualities.next(quality);
        }, function (error) {
            console.log(error.message);
        });
    };
    QualityService.prototype.getQualities = function () {
        return this.qualities.asObservable();
    };
    QualityService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], QualityService);
    return QualityService;
}());
exports.QualityService = QualityService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVhbGl0eS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicXVhbGl0eS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBRzNDLHdEQUFxRDtBQUVyRCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUc1QztJQUtJO1FBQUEsaUJBYUM7UUFmTyxjQUFTLEdBQUcsSUFBSSxpQ0FBZSxDQUFZLEVBQUUsQ0FBQyxDQUFDO1FBSW5ELENBQUMsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQzlCLEVBQUUsQ0FBQyxPQUFPLENBQUMsOEdBQThHLENBQUM7aUJBQ3pILElBQUksQ0FBQyxVQUFBLEVBQUU7Z0JBQ0osS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDdkIsQ0FBQyxDQUFDLEVBQUUsVUFBQSxLQUFLO2dCQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFBO1FBQ0wsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUVELCtCQUFNLEdBQU4sVUFBTyxTQUFpQjtRQUNwQixJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsMERBQTBELEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDcEcsSUFBSSxDQUFDLFVBQUEsRUFBRSxJQUFLLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQscUNBQVksR0FBWjtRQUFBLGlCQWtCQztRQWpCRyxJQUFJLE9BQU8sR0FBYyxFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUM7YUFDekMsSUFBSSxDQUFDLFVBQUEsSUFBSTtZQUNOLEdBQUcsQ0FBQSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBQ1QsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pCLFdBQVcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUM1QixDQUFDLENBQUM7WUFDUCxDQUFDO1lBRUQsS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBR1AsQ0FBQztJQUVELDZDQUFvQixHQUFwQixVQUFxQixTQUFpQixFQUFFLFFBQWdCO1FBQXhELGlCQWtCQztRQWpCRyxJQUFJLE9BQU8sR0FBYyxFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsdURBQXVELEVBQUUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDNUYsSUFBSSxDQUFDLFVBQUEsSUFBSTtZQUNOLEdBQUcsQ0FBQSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBQ1QsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pCLFdBQVcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUM1QixDQUFDLENBQUM7WUFDUCxDQUFDO1lBRUQsS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBR1gsQ0FBQztJQUVELHFDQUFZLEdBQVo7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBdkVRLGNBQWM7UUFEMUIsaUJBQVUsRUFBRTs7T0FDQSxjQUFjLENBd0UxQjtJQUFELHFCQUFDO0NBQUEsQUF4RUQsSUF3RUM7QUF4RVksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgUXVhbGl0eSB9IGZyb20gXCIuLi9tb2RlbHMvcXVhbGl0eS5tb2RlbFwiO1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gXCJyeGpzL09ic2VydmFibGVcIjtcclxuaW1wb3J0IHtCZWhhdmlvclN1YmplY3R9IGZyb20gXCJyeGpzL0JlaGF2aW9yU3ViamVjdFwiO1xyXG5cclxubGV0IFNxbGl0ZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtc3FsaXRlXCIpO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUXVhbGl0eVNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBkYXRhYmFzZTogYW55O1xyXG5cclxuICAgIHByaXZhdGUgcXVhbGl0aWVzID0gbmV3IEJlaGF2aW9yU3ViamVjdDxRdWFsaXR5W10+KFtdKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgKG5ldyBTcWxpdGUoXCJxdWFsaXR5LmRiXCIpKS50aGVuKGRiID0+IHtcclxuICAgICAgICAgICAgZGIuZXhlY1NRTChcIkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHF1YWxpdHkgKGlkIElOVEVHRVIgUFJJTUFSWSBLRVkgQVVUT0lOQ1JFTUVOVCwgY2hhcmFjdGVyIFRFWFQsIHRpbWVzdGFtcCBOVU1FUklDKVwiKVxyXG4gICAgICAgICAgICAudGhlbihpZCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFiYXNlID0gZGI7XHJcbiAgICAgICAgICAgIH0pLCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNSRUFURSBUQUJMRSBFUlJPUlwiLCBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiT1BFTiBEQiBFUlJPUlwiLCBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGluc2VydChjaGFyYWN0ZXI6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcblxyXG4gICAgICAgIHRoaXMuZGF0YWJhc2UuZXhlY1NRTChcIklOU0VSVCBJTlRPIHF1YWxpdHkgKGNoYXJhY3RlciwgdGltZXN0YW1wKSBWQUxVRVMgKD8sID8pXCIsIFtjaGFyYWN0ZXIsIHRpbWVzdGFtcF0pXHJcbiAgICAgICAgICAgIC50aGVuKGlkID0+IHt9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSU5TRVJUIEVSUk9SXCIsIGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhbGxRdWFsaXRpZXMoKSB7XHJcbiAgICAgICAgbGV0IHF1YWxpdHk6IFF1YWxpdHlbXSA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZGF0YWJhc2UuYWxsKFwiU0VMRUNUICogRlJPTSBxdWFsaXR5XCIpXHJcbiAgICAgICAgLnRoZW4ocm93cyA9PiB7XHJcbiAgICAgICAgICAgIGZvcihsZXQgcm93IGluIHJvd3MpIHtcclxuICAgICAgICAgICAgICAgIHF1YWxpdHkucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJjaGFyYWN0ZXJcIjogcm93c1tyb3ddWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidGltZXN0YW1wXCI6IHJvd3Nbcm93XVsyXVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucXVhbGl0aWVzLm5leHQocXVhbGl0eSk7XHJcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGdldFF1YWxpdGllc0J5UGVyaW9kKGZpcnN0RGF0ZTogbnVtYmVyLCBsYXN0RGF0ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHF1YWxpdHk6IFF1YWxpdHlbXSA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmRhdGFiYXNlLmFsbChcIlNFTEVDVCAqIEZST00gcXVhbGl0eSBXSEVSRSB0aW1lc3RhbXAgQkVUV0VFTiA/IEFORCA/XCIsIFtmaXJzdERhdGUsIGxhc3REYXRlXSlcclxuICAgICAgICAgICAgLnRoZW4ocm93cyA9PiB7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IHJvdyBpbiByb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVhbGl0eS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGFyYWN0ZXJcIjogcm93c1tyb3ddWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRpbWVzdGFtcFwiOiByb3dzW3Jvd11bMl1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnF1YWxpdGllcy5uZXh0KHF1YWxpdHkpO1xyXG4gICAgICAgICAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRRdWFsaXRpZXMoKTogT2JzZXJ2YWJsZTxRdWFsaXR5W10+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5xdWFsaXRpZXMuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcbn0iXX0=